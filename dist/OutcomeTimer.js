!function(t){function e(o){if(n[o])return n[o].exports;var r=n[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,e),r.l=!0,r.exports}var n={};e.m=t,e.c=n,e.d=function(t,n,o){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:o})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(1))},function(t,e,n){"use strict";function o(){var t=[];for(var e in manywho.OutcomeTimers){var n=manywho.OutcomeTimers[e];n&&t.push(r(n))}Promise.all(t)}function r(t){return t.startCounting(),!0}var i=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();Object.defineProperty(e,"__esModule",{value:!0}),manywho.OutcomeTimers={},manywho.CustomComponentOrchestrator?manywho.CustomComponentOrchestrator.doneSendHandlers.push(o):manywho.settings.initialize({},{invoke:{done:o}});var s=n(2);n(3);var u=function(t){function e(e){var n=t.call(this,e)||this;n.componentId="",n.flowKey="",n.attributes=new Map,n.timerId=-1,n.timerCounter=0,n.componentId=e.id,n.flowKey=e.flowKey;var o=manywho.model.getComponent(n.componentId,n.flowKey);if(o.attributes)for(var r in o.attributes)n.attributes.set(r,o.attributes[r]);return o.objectData&&o.objectData[0]&&manywho.state.setComponent(n.componentId,{objectData:[o.objectData[0]]},n.flowKey,!0),n}return i(e,t),e.prototype.getAttribute=function(t,e){return this.attributes.has(t)?this.attributes.get(t):e},e.prototype.componentDidMount=function(){manywho.OutcomeTimers[this.componentId]=this,this.startCounting()},e.prototype.componentWillUnmount=function(){clearInterval(this.timerId),this.timerId=-1},e.prototype.startCounting=function(){this.timerCounter=0,this.timerId=window.setInterval(this.timerHandler.bind(this),1e3)},e.prototype.timerHandler=function(){if(manywho.state.getComponent(this.componentId,this.flowKey).loading)this.timerCounter=0,this.forceUpdate();else if(this.timerCounter<parseInt(this.getAttribute("refreshIntervalSeconds",10)))this.timerCounter++,this.forceUpdate();else{this.timerCounter=0,this.timerId>=-1&&(clearInterval(this.timerId),this.timerId=-1);var t=this.getAttribute("refreshOutcomeId","");if(t&&t.length>0&&"null"!=t.toLowerCase()){var e=manywho.model.getOutcome(t,this.flowKey);return!e||manywho.component.onOutcome(e,null,this.flowKey)}}},e.prototype.render=function(){var t=parseInt(this.getAttribute("refreshIntervalSeconds",10))-this.timerCounter;return s.createElement("div",null,"Triggering outcome in ",t," seconds")},e}(s.Component);manywho.component.register("OutcomeTimer",u),e.default=u},function(t,e){t.exports=React},function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,